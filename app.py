# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OZrOiXBUTdDSTRAgMXXEbkrvr01MSogz
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit

import streamlit as st
import plotly.express as px
from data_preprocessing import load_and_clean_data

# Load data
df = load_and_clean_data()

# --- Page Configuration ---
st.set_page_config(page_title="Bird Species Observation Dashboard", layout="wide")

# --- Title and Description ---
st.title("ü¶ú Bird Species Observation Dashboard")
st.markdown("""
This dashboard allows you to **analyze bird species trends** across habitats, years, observers, and locations.  
Use the filters on the left to customize your view.
""")

# --- Sidebar Filters ---
st.sidebar.header("üîé Filter Data")

# Habitat Filter
habitat = st.sidebar.multiselect(
    "Select Habitat",
    options=df['Habitat'].unique(),
    default=df['Habitat'].unique()
)

# Year Filter with Select All
year_options = sorted(df['Year'].dropna().unique())
year_selection = st.sidebar.multiselect(
    "Select Year",
    options=year_options + ["Select All"],
    default=year_options
)
selected_years = year_options if "Select All" in year_selection else year_selection

# Location Filter
location_options = sorted(df['Location_Type'].dropna().unique())
location_selection = st.sidebar.multiselect(
    "Select Location Type",
    options=location_options,
    default=location_options
)

# Observer Filter
observer_options = sorted(df['Observer'].dropna().unique())
observer_selection = st.sidebar.multiselect(
    "Select Observer",
    options=observer_options,
    default=observer_options
)

# --- Filter Data ---
filtered_df = df[
    (df['Habitat'].isin(habitat)) &
    (df['Year'].isin(selected_years)) &
    (df['Location_Type'].isin(location_selection)) &
    (df['Observer'].isin(observer_selection))
]

# --- Metric Cards ---
col1, col2, col3 = st.columns(3)
col1.metric("Total Observations", len(filtered_df))
col2.metric("Unique Species", filtered_df['Scientific_Name'].nunique())
col3.metric("Years Covered", len(selected_years))

# --- Tabs for Visualizations ---
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "üìà Trends", "üìä Habitat Insights", "üå°Ô∏è Environmental Impact", "üèÜ Top Species", "üìã Data Table"
])

# --- Species Dropdown ---
species = st.selectbox(
    "Select Species",
    options=sorted(filtered_df['Scientific_Name'].unique())
)
species_df = filtered_df[filtered_df['Scientific_Name'] == species]

# ---- Tab 1: Temporal & Seasonal Trends ----
with tab1:
    # Temporal Trend
    temporal_counts = species_df.groupby(['Year','Month']).size().reset_index(name='Count')
    fig1 = px.line(
        temporal_counts, x='Month', y='Count', color='Year',
        title=f"Monthly Trend for {species}",
        template="plotly_dark"
    )
    st.plotly_chart(fig1, use_container_width=True)

    # Seasonal Trend
    def get_season(month):
        if month in [12,1,2]: return "Winter"
        elif month in [3,4,5]: return "Spring"
        elif month in [6,7,8]: return "Summer"
        else: return "Autumn"

    filtered_df['Season'] = filtered_df['Month'].apply(get_season)
    season_counts = filtered_df.groupby('Season').size().reset_index(name='Count')
    fig_season = px.bar(
        season_counts, x='Season', y='Count',
        title="Seasonal Observation Trends",
        color='Season', template="plotly_dark"
    )
    st.plotly_chart(fig_season, use_container_width=True)

    # Animated species trend chart by year
    species_trend = (
        filtered_df.groupby(['Year', 'Scientific_Name'])
        .size()
        .reset_index(name='Count')
    )

    fig_animated = px.bar(
        species_trend,
        x='Scientific_Name',
        y='Count',
        color='Scientific_Name',
        animation_frame='Year',
        title="Species Count Change Over Years (Animated)",
        template="plotly_dark"
    )

    fig_animated.update_layout(xaxis={'categoryorder': 'total descending'})
    st.plotly_chart(fig_animated, use_container_width=True)

# ---- Tab 2: Habitat Distribution ----
with tab2:
    habitat_counts = filtered_df['Habitat'].value_counts().reset_index()
    habitat_counts.columns = ['Habitat', 'Count']
    fig2 = px.bar(
        habitat_counts, x='Habitat', y='Count',
        title="Observations by Habitat",
        color='Habitat', template="plotly_dark"
    )
    st.plotly_chart(fig2, use_container_width=True)

# ---- Tab 3: Environmental Factors ----
with tab3:
    if 'Temperature' in df.columns and 'Humidity' in df.columns:
        fig3 = px.scatter(
            filtered_df, x='Temperature', y='Humidity',
            color='Habitat',
            hover_data=['Scientific_Name'],
            title="Temperature vs Humidity",
            template="plotly_dark"
        )
        st.plotly_chart(fig3, use_container_width=True)

    temporal_heatmap = filtered_df.groupby(['Year','Month']).size().reset_index(name='Count')
    fig4 = px.density_heatmap(
        temporal_heatmap, x='Month', y='Year', z='Count',
        color_continuous_scale='Viridis',
        title="Monthly Observation Density",
        template="plotly_dark"
    )
    st.plotly_chart(fig4, use_container_width=True)

# ---- Tab 4: Top 10 Species ----
with tab4:
    top_species = filtered_df['Scientific_Name'].value_counts().head(10).reset_index()
    top_species.columns = ['Species', 'Count']
    fig_top = px.bar(
        top_species, x='Count', y='Species',
        orientation='h',
        title="Top 10 Most Observed Species",
        color='Count', color_continuous_scale='Blues',
        template="plotly_dark"
    )
    st.plotly_chart(fig_top, use_container_width=True)

# ---- Tab 5: Data Table ----
with tab5:
    st.dataframe(filtered_df.head(50))
    st.download_button(
        label="Download Filtered Data as CSV",
        data=filtered_df.to_csv(index=False),
        file_name="filtered_bird_data.csv",
        mime="text/csv"
    )
